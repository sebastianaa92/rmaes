data < read.csv("C:\Users\sebastianaa\OneDrive - Universidad de la Sabana (2)\Maestría Analítica Aplicada\Metodos_estadisticos_avanzados_1\Proyectos_R_Studio\DBs\Coldplay.csv")
data < read.csv("C:/Users/sebastianaa/OneDrive - Universidad de la Sabana (2)/Maestría Analítica Aplicada/Metodos_estadisticos_avanzados_1/Proyectos_R_Studio/DBs/Coldplay.csv")
data = read.csv("C:/Users/sebastianaa/OneDrive - Universidad de la Sabana (2)/Maestría Analítica Aplicada/Metodos_estadisticos_avanzados_1/Proyectos_R_Studio/DBs/Coldplay.csv")
clear
data <- read.csv("C:/Users/sebastianaa/OneDrive - Universidad de la Sabana (2)/Maestría Analítica Aplicada/Metodos_estadisticos_avanzados_1/Proyectos_R_Studio/DBs/Coldplay.csv")
install.packages('tinytex')
tinytex::install_tinytex()
install.packages('tinytex')
tinytex::install_tinytex()
#El númeral en R sirve para comentar
#Limpieza de memoria
rm(list = ls())
data <- read.csv("C:/Users/sebastianaa/OneDrive - Universidad de la Sabana (2)/Maestría Analítica Aplicada/Metodos_estadisticos_avanzados_1/Proyectos_R_Studio/DBs/Coldplay.csv")
View(data)
View(data)
install.packages("dplyr")
library("dplyr")
filtrado <- data %=% filter(album_name="Parachutes")
filtrado <- data = filter(album_name="Parachutes")
filtrado <- data = filter(album_name=="Parachutes")
data <- read.csv("C:/Users/sebastianaa/OneDrive - Universidad de la Sabana (2)/Maestría Analítica Aplicada/Metodos_estadisticos_avanzados_1/Proyectos_R_Studio/DBs/Coldplay.csv")
summary(data)
data <- read.csv("C:/Users/sebastianaa/OneDrive - Universidad de la Sabana (2)/Maestría Analítica Aplicada/Metodos_estadisticos_avanzados_1/Proyectos_R_Studio/DBs/Coldplay.csv")
summary(data)
str(data)
filtrado <- data %>% filter(album_name=="Parachutes")
filtrado
str(cp)
str(data)
ni=cp[5,14]
ni=data[5,14]
ni
View("ni")
View(ni)
data2 = cp[,-c(1,3,4)]
data2 = data[,-c(1,3,4)]
data2
View(data2)
install.packages("MASS","nortest","readxl,"IMTest)
install.packages("MASS","nortest","readxl","IMTest"")
EXIT
exit
clear
install.packages("MASS","readxl","IMTest","nortest")
install.packages(c("MASS", "readxl", "IMTest", "nortest"))
media
media = mean(data$valence)
media
summary(cp$valence)
summary(data$valence)
summary(data$valence)
round(summary(data$valence))
round(summary(data$valence),digits = 2)
round(summary(data$valence),digits = 1)
hist(data$valence)
hist(data$valence ,main = "Histograma", xlab = "Valence", col= "darkblue", border= "black")
hist(data$valence ,main = "Histograma", xlab = "Valence", col= "darkblue", border= "white")
hist(data$valence ,main = "Histograma", xlab = "Valence","coso", col= "darkblue", border= "white")
hist(data$valence ,main = "Histograma", xlab = "Valence",ylab = "Frecuencia", col= "darkblue", border= "white")
boxplot(data$)
boxplot(data$valence)
hist(data$valence ,main = "Histograma", xlab = "Valence",ylab = "Frecuencia", col= "darkblue", border= "white")
boxplot(data$valence, horizontal = T)
boxplot(data$valence, horizontal = T, clol = "darkblue")
boxplot(data$valence, horizontal = T, col = "darkblue")
#Para saber cuales son los cuartiles
quantile(data$valence)
#Para saber el decil
quantile(data$valence,0.10)
#Función para hacer boxplot
boxplot(data$valence, horizontal = T, col = "darkblue", border = "white")
#Función para hacer boxplot
boxplot(data$valence, horizontal = T, col = "darkblue", border = "black")
filtros
filtros <- data %>% filter(album_name == "Parachutes")
filtros
View(filtros)
as.data.frame(nombrealbum)
nombrealbum = table(cp$album_name)
nombrealbum = table(data$album_name)
album = as.data.frame(nombrealbum)
album
al1=filter(data$album_name == "Parachutes")
album = as.data.frame(nombrealbum)
al1=filter(data$album_name == "Parachutes")
al1 = filter(data, data$album_name == "Parachutes")
View(al1)
View(album)
View(al1)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
rm(list=ls())
df = read.csv("C:/Users/sebastianaa/OneDrive - Universidad de la Sabana (2)/Maestría Analítica Aplicada/Metodos_estadisticos_avanzados_1/Proyectos_R_Studio/DBs/Saber.csv")
summary(df)
library(dplyr)
filas_NA = sum(!complete.cases(df))
filas_NA
filas_NA / nrow(df)
df_limpio = na.omit(df)
porcentaje_na = sum(is.na(df$PUNT_INGLES)) / nrow(df) * 100
filas_NA = sum(!complete.cases(df_limpio))
filas_NA
View(df_limpio)
set.seed(123)
n = 1000
muestra = df_limpio[sample(1:nrow(df_limpio), n), ]
View(muestra)
if(porcentaje_na) < 0.010{
df2 = read.table("/home/sebastian/Documents/Maestría/Metodos_estadisticos_av/Datos/HIPOTESIS.txt", header = TRUE, sep = ",")
sust = table(df2$substance)
sust = data.frame(sust)
print(sust)
library(ggplot2)
ggplot(data = sust, aes(x="", y= Freq, fill = Var1))+
geom_bar(stat = "identity", width = 1)+
coord_polar(theta = "y")+
geom_text(aes(label = ..count..), stat = "count", position = position_stack(vjust = 0.5))+
labs(title = "Diagrama de coso")+
theme_void()
library(ggplot2)
ggplot(data = sust, aes(x="", y= Freq, fill = Var1))+
geom_bar(stat = "identity", width = 1)+
coord_polar(theta = "y")+
geom_text(aes(label = ..count..), stat = "count", position = position_stack(vjust = 0.5))+
labs(title = "Diagrama de coso")+
theme_void()
library(ggplot2)
ggplot(data = sust, aes(x="", y= Freq, fill = Var1))+
geom_bar(stat = "identity", width = 1)+
coord_polar(theta = "y")+
geom_text(aes(label = ..count..), stat = "count", position = position_stack(vjust = 0.5))+
labs(title = "Diagrama de coso")+
theme_void()
library(ggplot2)
ggplot(data = sust, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = Freq), position = position_stack(vjust = 0.5)) +  # Usar Freq directamente
labs(title = "Diagrama de sectores") +
theme_void()
library(ggplot2)
ggplot(data = sust, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y") +
geom_text(aes(label=Freq), position=position_stack(vjust=0.5)) +  # Usar directamente Freq y ajustar vjust si es necesario
labs(title="Diagrama de coso") +
theme_void()
df2 = read.table("/home/sebastian/Documents/Maestría/Metodos_estadisticos_av/Datos/HIPOTESIS.txt", header = TRUE, sep = ",")
sust = table(df2$substance)
sust = data.frame(sust)
print(sust)
library(ggplot2)
ggplot(data = sust, aes(x = "", y = Freq, fill = Var1)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
geom_text(aes(label = Freq), position = position_stack(vjust = 0.5)) +  # Usar Freq directamente
labs(title = "Diagrama de sectores") +
theme_void()
library(ggplot2)
ggplot(data = sust, aes(x="", y=Freq, fill=Var1)) +
geom_bar(stat="identity", width=1) +
coord_polar(theta="y") +
geom_text(aes(label=Freq), position=position_stack(vjust=0.5)) +  # Usar directamente Freq y ajustar vjust si es necesario
labs(title="Diagrama de coso") +
theme_void()
n = nrow(df2)
#Vamos a crear el intervalo de confianza para la muestra de 246 datos guardados en la variable n
#Prop significa prueba de proporción en R studio
#x es el vector del valor de la tabla "sust", es decir, le especifico la ubicación en x,y y me devuelve el número que esté allí
#n el número de filas
#conf.level es el nivel de confianza
prop.test(sust[1,2], n , conf.level = 0.95, correct = FALSE)
binom.test(94,n,conf.level = 0.95)
p = 94/n
qnorm(0.025,lower.tail =  F)
Li = p-qnorm(0.025, lower.tail= F )*(sqrt(p*(1-p)/n))
physical1 = t.test(df2$physical1, conf.level = 0.95)
hist(df2$physical1)
print(physical1)
t.test(df2$physical2, conf.level = 0.95)
hist(df2$physical2)
t.test(df2$mental1, conf.level = 0.95)
hist(df2$mental1)
t.test(df2$mental2, conf.level = 0.95)
hist(df2$mental2)
chisq.test(df2$physical1)
Li = (n-1) * var(df2$physical1)/qchisq(0.025, n-1, lower.tail = F)
Ls = (n-1) * var(df2$physical1)/qchisq(0.025, n-1, lower.tail = T)
print(Li)
sqrt(Li)
sqrt(Ls)
chisq.test(df2$physical2)
Li2 = (n-1) * var(df2$physical2)/qchisq(0.025, n-1, lower.tail = F)
Ls2 = (n-1) * var(df2$physical2)/qchisq(0.025, n-1, lower.tail = T)
print(Li2)
sqrt(Li2)
sqrt(Ls2)
View(muestra)
View(df2)
knitr::opts_chunk$set(echo = TRUE)
Li = (n-1) * var(muestra$ESTU_TIPODOCUMENTO)/qchisq(0.025, n-1, lower.tail = F)
Ls = (n-1) * var((muestra$ESTU_TIPODOCUMENTO)/qchisq(0.025, n-1, lower.tail = T)
print(Li)
Li = (n-1) * var(muestra$ESTU_TIPODOCUMENTO)/qchisq(0.025, n-1, lower.tail = F)
Ls = (n-1) * var(muestra$ESTU_TIPODOCUMENTO)/qchisq(0.025, n-1, lower.tail = T)
print(Li)
sqrt(Li)
valores  = unique(muestra$ESTU_TIPODOCUMENTO)
print(valores)
valores  = unique(muestra$ESTU_TIPODOCUMENTO)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_TIPODOCUMENTO == valor)
}
resultado = prop.test(x = x , n = n, conf.level = 0.95)
cat("n\Tipo de documento:" , valor)
valores  = unique(muestra$ESTU_TIPODOCUMENTO)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_TIPODOCUMENTO == valor)
}
resultado = prop.test(x = x , n = n, conf.level = 0.95)
cat("n\ Tipo de documento:" , valor)
print(resultado)
valores = unique(muestra$ESTU_NACIONALIDAD)
#Tamaño de la muestra es n
n = nrow(muestra)
resultado = prop.test(x = x, n = n, conf.level = 0.95)
print(resultado)
valores = unique(muestra$ESTU_NACIONALIDAD)
#Tamaño de la muestra es n
n = nrow(muestra)
resultado = prop.test(x = x, n = n, conf.level = 0.95)
print(resultado)
print(valores)
valores = unique(muestra$ESTU_NACIONALIDAD)
#Tamaño de la muestra es n
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
}
resultado = prop.test(x = x, n = n, conf.level = 0.95)
print(resultado)
print(valores)
valores = unique(muestra$ESTU_NACIONALIDAD)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
# Realizamos la prueba de proporción para cada nacionalidad contra 0.5
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
print(paste("Nacionalidad:", valor))
print(resultado)
valores = unique(muestra$ESTU_NACIONALIDAD)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
# Realizamos la prueba de proporción para cada nacionalidad contra 0.5
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
print(paste("Nacionalidad:", valor))
print(resultado)
}
valores = unique(muestra$ESTU_NACIONALIDAD)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
# Realizamos la prueba de proporción para cada nacionalidad contra 0.5
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
print(paste("Nacionalidad:", valor))
print(resultado)
}
valores = unique(muestra$ESTU_NACIONALIDAD)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
# Realizamos la prueba de proporción para cada nacionalidad contra 0.5
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
# Mostramos los resultados con print
print(paste("Nacionalidad:", valor))
print(resultado)
}
valores = unique(muestra$ESTU_NACIONALIDAD)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
# Realizamos la prueba de proporción para cada nacionalidad contra 0.5
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
# Mostramos los resultados con print
print(paste("Nacionalidad:", valor))
print(resultado)
}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
valores  = unique(muestra$ESTU_TIPODOCUMENTO)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_TIPODOCUMENTO == valor)
}
resultado = prop.test(x = x , n = n, conf.level = 0.95)
cat("n\ Tipo de documento:" , valor)
print(resultado)
valores = unique(muestra$ESTU_NACIONALIDAD)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
# Realizamos la prueba de proporción para cada nacionalidad contra 0.5
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
# Mostramos los resultados con print
print(paste("Nacionalidad:", valor))
print(resultado)
}
valores = unique(muestra$ESTU_GENERO)
n = nrow(muestra)
for (valor in valores){
x = sum(muestra$ESTU_GENERO == valor)
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
print(resultado)
knitr::opts_chunk$set(echo = TRUE)
valores = unique(muestra$ESTU_GENERO)
n = nrow(muestra)
for (valor in valores){
x = sum(muestra$ESTU_GENERO == valor)
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
print(paste("Genero:",valor))
}
valores = unique(muestra$ESTU_GENERO)
n = nrow(muestra)
for (valor in valores){
x = sum(muestra$ESTU_GENERO == valor)
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
print(paste("Genero:",valor))
print(resultado)
}
chisq.test(muestra$PUNT_INGLES)
Li2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = F)
Ls2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = T)
print(Li2)
sqrt(Li2)
sqrt(Ls2)
chisq.test(muestra$PUNT_INGLES)
Li2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = F)
Ls2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = T)
print(Li2)
sqrt(Li2)
sqrt(Ls2)
#chisq.test(muestra$PUNT_INGLES)
Li2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = F)
Ls2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = T)
print(Li2)
sqrt(Li2)
sqrt(Ls2)
Li2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = F)
Ls2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = T)
sqrt(Li2)
sqrt(Ls2)
valores = unique(muestra$periodo)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
valores  = unique(muestra$ESTU_TIPODOCUMENTO)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_TIPODOCUMENTO == valor)
}
resultado = prop.test(x = x , n = n, conf.level = 0.95)
cat("n\ Tipo de documento:" , valor)
print(resultado)
valores = unique(muestra$ESTU_NACIONALIDAD)
n = nrow(muestra)
for (valor in valores) {
x = sum(muestra$ESTU_NACIONALIDAD == valor)
# Realizamos la prueba de proporción para cada nacionalidad contra 0.5
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
# Mostramos los resultados con print
print(paste("Nacionalidad:", valor))
print(resultado)
}
valores = unique(muestra$ESTU_GENERO)
n = nrow(muestra)
for (valor in valores){
x = sum(muestra$ESTU_GENERO == valor)
resultado = prop.test(x = x, n = n, p = 0.5, conf.level = 0.95)
print(paste("Genero:",valor))
print(resultado)
}
#chisq.test(muestra$PUNT_INGLES)
Li2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = F)
Ls2 = (n-1) * var(muestra$PUNT_INGLES)/qchisq(0.025, n-1, lower.tail = T)
sqrt(Li2)
sqrt(Ls2)
